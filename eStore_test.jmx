<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API-SSR" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">8</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="host" elementType="Argument">
              <stringProp name="Argument.name">host</stringProp>
              <stringProp name="Argument.value">${__P(host,stg2.rhnonprod.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="path" elementType="Argument">
              <stringProp name="Argument.name">path</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="env" elementType="Argument">
              <stringProp name="Argument.name">env</stringProp>
              <stringProp name="Argument.value">${__P(env,stg2)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_AEM_SSR" elementType="Cookie" testname="FEATURE_AEM_SSR">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="endpoint" elementType="Cookie" testname="endpoint">
              <stringProp name="Cookie.value">tiger</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_AEM_SSR" elementType="Cookie" testname="FEATURE_AEM_SSR">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="endpoint" elementType="Cookie" testname="endpoint">
              <stringProp name="Cookie.value">tiger</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">stg2.rhnonprod.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="TestPlan.comments">${host}</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01_API-CG" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CGs.csv" enabled="true">
            <stringProp name="filename">CGs_ATG.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">siteId,CGId</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-CG-1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/catalog/category/collections.jsp?cellBackground=false&amp;categoryId=${CGId}&amp;sale=false</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02_API-PG" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PGs.csv" enabled="true">
            <stringProp name="filename">PGs_ATG.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">siteId,PGId,PGTerm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-PG-1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/catalog/category/products.jsp?categoryId=${PGId}&amp;sale=false&amp;pgterm=category%3A${PGId}&amp;hasShellProducts=false</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03_API-PDP" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PDPs.csv" enabled="true">
            <stringProp name="filename">PDPs_ATG.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">siteId,productId</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-PDP-1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/catalog/product/product.jsp?productId=${productId}&amp;sale=false</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>3.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GraphQL-CSR" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(nav_threads,5)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(nav_rampup,5)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(nav_duraton,1800)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="host" elementType="Argument">
              <stringProp name="Argument.name">host</stringProp>
              <stringProp name="Argument.value">${__P(host,stg2.rhnonprod.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="path" elementType="Argument">
              <stringProp name="Argument.name">path</stringProp>
              <stringProp name="Argument.value">${__P(path,rh-experience-layer-v1-tiger)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="env" elementType="Argument">
              <stringProp name="Argument.name">env</stringProp>
              <stringProp name="Argument.value">${__P(env,stg2)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_RH_TD" elementType="Cookie" testname="FEATURE_RH_TD">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_AEM_RENDER_CONTROL" elementType="Cookie" testname="FEATURE_AEM_RENDER_CONTROL">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_WISTIA_OPTIMIZATIONS" elementType="Cookie" testname="FEATURE_WISTIA_OPTIMIZATIONS">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="fusion_gcp" elementType="Cookie" testname="fusion_gcp">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="fusion_search" elementType="Cookie" testname="fusion_search">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="endpoint" elementType="Cookie" testname="endpoint">
              <stringProp name="Cookie.value">tiger</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="x-request-id" elementType="Header">
              <stringProp name="Header.name">x-request-id</stringProp>
              <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Referer" elementType="Header">
              <stringProp name="Header.name">Referer</stringProp>
              <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
            </elementProp>
            <elementProp name="apollographql-client-name" elementType="Header">
              <stringProp name="Header.name">apollographql-client-name</stringProp>
              <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
            </elementProp>
            <elementProp name="x-operation" elementType="Header">
              <stringProp name="Header.name">x-operation</stringProp>
            </elementProp>
            <elementProp name="Client-Origin" elementType="Header">
              <stringProp name="Header.name">Client-Origin</stringProp>
              <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
            <elementProp name="authorization" elementType="Header">
              <stringProp name="Header.name">authorization</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="content-type" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.0_Homepage" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">none</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
                <collectionProp name="CookieManager.cookies">
                  <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="PROTECT_FEATURE_SSR" elementType="Cookie" testname="PROTECT_FEATURE_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="FEATURE_AEM_SSR" elementType="Cookie" testname="FEATURE_AEM_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain"></stringProp>
                    <stringProp name="Cookie.path"></stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
              </CookieManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.0_Auth" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/production/protocol/openid-connect/auth" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">rh-mobile-frontend</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://stg2.rhnonprod.com/silent-check-sso.html</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="state" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">state</stringProp>
                    <stringProp name="Argument.value">${__UUID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_mode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_mode</stringProp>
                    <stringProp name="Argument.value">fragment</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">code</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">openid</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nonce" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nonce</stringProp>
                    <stringProp name="Argument.value">${__UUID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="prompt" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">prompt</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="HTTPSampler.path">/auth/realms/staging/protocol/openid-connect/auth?</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">https://rh.com/silent-check-sso.html</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">iframe</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">NEWEXP=true; ui_asset_path=/rh-mobile-frontend-v1-shark/; endpoint=shark; FEATURE_INTERNATIONAL=true; FEATURE_SUPPRESS_UK=false; FEATURE_AEM_RENDER_CONTROL=true; FEATURE_WISTIA_OPTIMIZATIONS=true; fusion_search=true; PF_EXP=DESKTOP; NEWX0422=true</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Ch-Ua" elementType="Header">
                    <stringProp name="Header.name">Sec-Ch-Ua</stringProp>
                    <stringProp name="Header.value">&quot;Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;115&quot;, &quot;Chromium&quot;;v=&quot;115&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Ch-Ua-Mobile" elementType="Header">
                    <stringProp name="Header.name">Sec-Ch-Ua-Mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Ch-Ua-Platform" elementType="Header">
                    <stringProp name="Header.name">Sec-Ch-Ua-Platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value"> iframe</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value"> same-site</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="3.0_Collection Gallery" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.1_CatalogNavigation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CollectionGalleryIds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CollectionGalleryIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories[0].childCategories[?(@.targetUrl contains &apos;collections&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ProductGalleryIds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ProductGalleryIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories..[?(@.targetUrl contains &apos;products&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="CollectionGalleryIds" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">int CollectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger()
int ProductGalleryIds_matchNr = vars.get(&quot;ProductGalleryIds_matchNr&quot;).toInteger()

Random random = new Random()
int CollectionGalleryIds_index = random.nextInt(CollectionGalleryIds_matchNr) + 1
int ProductGalleryIds_index = random.nextInt(ProductGalleryIds_matchNr) + 1

String CollectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot;+CollectionGalleryIds_index)
String ProductGalleryId = vars.get(&quot;ProductGalleryIds_&quot;+ProductGalleryIds_index)
//log.info(&quot;CollectionGalleryId: &quot;+CollectionGalleryId)
//log.info(&quot;ProductGalleryId: &quot;+ProductGalleryId)
vars.put(&quot;CollectionGalleryId&quot;,CollectionGalleryId)
vars.put(&quot;ProductGalleryIds&quot;,ProductGalleryId)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.2_GetUserForSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="email" enabled="true">
              <stringProp name="TestPlan.comments">e05e4753a0884a61a7ec5aa1e4b03c93@some.com</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">email</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.email</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="currentCartId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="firstName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">firstName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.firstName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="lastName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">lastName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.lastName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.3_AboveNavPromo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AboveNavPromo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } } </stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.4_WORHMenu-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.5_WORHMenu-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.6_PromoDisplayContent" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">PromoDisplayContent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;context&quot;: &quot;CategorySitewideBanner&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">PromoDisplayContent</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }	</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;context&quot;: &quot;CategorySitewideBanner&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="PromoDisplayContent-2" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">PromoDisplayContent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">PromoDisplayContent</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.7_GetAemModel-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.8_GetAemModel-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.9_GetAemModel-3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/collections&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/collections&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.10_GlobalStylesheet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.11_CollectionGallery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CollectionGallery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CollectionGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $countryCode: String, $userType: String, $siteId: String, $measureSystem: String, $locale: String) { collectionGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode countryCode: $countryCode userType: $userType siteId: $siteId measureSystem: $measureSystem locale: $locale ) { amountRemaining nextStart collectionGallery { ...CollectionCategoryFields __typename } __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts stockInfo { totalSkus inStock totalInStockSkus __typename } additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${CollectionGalleryId}&quot;,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;count&quot;: 15,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;US&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CollectionGallery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CollectionGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $countryCode: String, $userType: String, $siteId: String, $measureSystem: String, $locale: String) { collectionGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode countryCode: $countryCode userType: $userType siteId: $siteId measureSystem: $measureSystem locale: $locale ) { amountRemaining nextStart collectionGallery { ...CollectionCategoryFields __typename } __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts stockInfo { totalSkus inStock totalInStockSkus __typename } additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${CollectionGalleryId}&quot;,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;count&quot;: 15,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;US&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ProductGalleryId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ProductGalleryId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.collectionGallery.collectionGallery.[*].[?(@.hasProducts == true)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="ProductGalleryId" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.util.Random;

String productGalleryId = vars.get(&quot;ProductGalleryId&quot;);
Random random = new Random();

if (productGalleryId.equals(&quot;NA&quot;)) {
    int collectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger();
    int productGalleryIds_matchNr = vars.get(&quot;ProductGalleryIds_matchNr&quot;).toInteger();
    int collectionGalleryIds_index = random.nextInt(collectionGalleryIds_matchNr) + 1;
    int productGalleryIds_index = random.nextInt(productGalleryIds_matchNr) + 1;
    String collectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot; + collectionGalleryIds_index);
    productGalleryId = vars.get(&quot;ProductGalleryIds_&quot; + productGalleryIds_index);
    vars.put(&quot;CollectionGalleryId&quot;, collectionGalleryId);
    vars.put(&quot;ProductGalleryId&quot;, productGalleryId);
} else {
    int collectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger();
    int collectionGalleryIds_index = random.nextInt(collectionGalleryIds_matchNr) + 1;
    String collectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot; + collectionGalleryIds_index);
    vars.put(&quot;CollectionGalleryId&quot;, collectionGalleryId);
}

//log.info(&quot;CollectionGalleryId: &quot; + vars.get(&quot;CollectionGalleryId&quot;));
//log.info(&quot;ProductGalleryId: &quot; + vars.get(&quot;ProductGalleryId&quot;));</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.12_CatalogNavigation-2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.13_CartProjection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.14_GetBrandSubscriptionsByEmail" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4.0_Product Gallery" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.1_GetUserForSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.2_AboveNavPromo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AboveNavPromo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.3_GetAemModel-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.4_CatalogNavigation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.5_WORHMenu-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.6_WORHMenu-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.7_GetAemModel-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.8_Search" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Search&quot;,&quot;variables&quot;:{
  &quot;ntt&quot;: &quot;category:${ProductGalleryId}&quot;,
  &quot;nrpp&quot;: 12,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
},&quot;query&quot;:&quot;query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String) {\n  search(\n    ntt: $ntt\n    contentType: $contentType\n    n: $n\n    nrpp: $nrpp\n    ns: $ns\n    no: $no\n    country: $country\n    currencyCode: $currencyCode\n    userType: $userType\n    site: $site\n    infiniteScroll: $infiniteScroll\n    categoryId: $categoryId\n    sale: $sale\n    locale: $locale\n  ) {\n    redirectUrl\n    stocked\n    zeroResults {\n      ...ZeroResultFields\n      __typename\n    }\n    adjustedSearches {\n      ...AdjustedSearchFields\n      __typename\n    }\n    headerConfig {\n      title\n      template\n      __typename\n    }\n    sizeFacets\n    materialFacets\n    resultList {\n      lastRecNum\n      firstRecNum\n      recsPerPage\n      totalNumRecs\n      records {\n        recordType\n        product {\n          altImageUrl\n          imageUrl\n          galleryDescription\n          alternateImages {\n            imageUrl\n            __typename\n          }\n          displayName\n          anchor\n          repositoryId\n          colorizable\n          imageFlip\n          newProduct\n          emptyProduct\n          metaProductComponent\n          removeFromBrowse\n          pgCrop\n          pgCropRules\n          rhr\n          pdpImageLayout\n          skuPriceInfo {\n            fullSkuId\n            currencySymbol\n            listPrice\n            salePrice\n            memberPrice\n            tradePrice\n            contractPrice\n            nextgenDriven\n            onSale\n            onClearance\n            showMemberPrice\n            skuOptions {\n              id\n              optionType\n              label\n              __typename\n            }\n            __typename\n          }\n          metaProduct\n          priceInfo {\n            currencySymbol\n            isCustomProduct\n            isRetail\n            isUnavailable\n            priceFilter\n            isSale\n            priceMessage\n            priceRange {\n              allOnSale\n              assetId\n              currencyApplied\n              highestFullSkuId\n              highestPaidFullSkuId\n              lowestFullSkuId\n              lowestPaidFullSkuId\n              noPriceRange\n              onClearance\n              onSale\n              onSaleAndOnClearance\n              previewMode\n              salePriceListId\n              tradeBest\n              __typename\n            }\n            rangeType\n            showMemberPrice\n            strikePriceLabel\n            priceMessagePrice\n            listPrices\n            listPriceLabel\n            salePrices\n            salePriceLabel\n            memberPrices\n            memberPriceLabel\n            lowestMemberPrice\n            lowestSalePrice\n            overridePriceLabel\n            skulowestListPrice\n            skulowestMemberPrice\n            skulowestSalePrice\n            nextGenDriven\n            nextGenDrivenOnSale\n            __typename\n          }\n          swatchInfo {\n            swatchesToDisplay {\n              imageRef\n              imageUrl\n              swatchId\n              displayName\n              __typename\n            }\n            numAdditionalSwatchesAvailable\n            numAdditionalSaleSwatchesAvailable\n            __typename\n          }\n          galleryDescription\n          percentSaleSkus\n          lowestskuPriceInfo {\n            skuListSaleprice\n            skuMemberSalePrice\n            skuSalePrice\n            __typename\n          }\n          __typename\n        }\n        sku {\n          fullSkuId\n          __typename\n        }\n        __typename\n      }\n      sortOptions {\n        navigationState\n        label\n        selected\n        __typename\n      }\n      __typename\n    }\n    resultTabs {\n      ...ResultTab\n      __typename\n    }\n    booleanFacets {\n      ...RefinementMenu\n      __typename\n    }\n    refinementMenus {\n      ...RefinementMenu\n      __typename\n    }\n    otherInfo {\n      ...OtherInfo\n      __typename\n    }\n    instructionResultList {\n      ...InstructionResultList\n      __typename\n    }\n    productCarousel {\n      ...ProductCarousel\n      __typename\n    }\n    promoDisplay {\n      ...PromoDisplayFields\n      __typename\n    }\n    searchQueryId\n    filterQueries\n    skuSearch\n    sku_siteId\n    ruleExecuted\n    saleMemberInfo {\n      ...SaleMemberInfoFields\n      __typename\n    }\n    ATGCollectionGalleryInfo {\n      collectionGallery {\n        ...ATGCollectionGalleryInfo\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PromoDisplayFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  subItems {\n    ...SubItem\n    __typename\n  }\n  template\n  text\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n  title\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Layer on PromoDisplayLayer {\n  __typename\n  layerType\n  label\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  dynamicText {\n    verticalAlign\n    horizontalAlign\n    classes\n    promoId\n    styles\n    topCoordinate\n    rightCoordinate\n    bottomCoordinate\n    leftCoordinate\n    width\n    modalType\n    __typename\n  }\n  htmlText\n  shortText\n  link\n  modal\n  path\n}\n\nfragment DynamicText on PromoDisplayDynamicText {\n  __typename\n  layout\n  alt\n  width\n  style\n  height\n  coords\n  productIds\n  categoryId\n  wistia\n  transitionStartStyles\n  transitionEndStyles\n  transitionInDelay\n  exclusionParam\n  modalType\n  addbanner\n  autoplay\n  slidetime\n  easing\n  pauseOnHover\n  effecttime\n  resetOffScreen\n}\n\nfragment CatalogAsset on PromoDisplayCatalogAsset {\n  __typename\n  skuId\n  categoryId\n  productId\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  quickLook\n  id\n}\n\nfragment SubItem on PromoDisplay {\n  __typename\n  ...SubItemFields\n  subItems {\n    ...SubItemFields\n    __typename\n  }\n}\n\nfragment SubItemFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  template\n  text\n  title\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n}\n\nfragment CategoryProductFields on CategoryProduct {\n  __typename\n  id\n  displayName\n  imageUrl\n  imageFlip\n  altImages {\n    imageUrl\n    __typename\n  }\n  galleryDescription\n  newProduct\n  type\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  uxAttributes {\n    triggerSwatchImage\n    productType\n    giftCert\n    __typename\n  }\n  customProduct\n  pgCrop\n  pgCropRules\n  rhr\n  pdpImageLayout\n  seoDescription\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n  priceRange {\n    memberLowestListPrice\n    __typename\n  }\n}\n\nfragment ZeroResultFields on SearchZeroResults {\n  __typename\n  searchTerms\n  otherBrandSearchResults {\n    brandResultCount\n    brandName\n    brandLink {\n      navigationState\n      siteState {\n        companyCode\n        properties {\n          brandName\n          __typename\n        }\n        __typename\n      }\n      host\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AdjustedSearchFields on AdjustedSearch {\n  __typename\n  autoPhrased\n  adjustedTerms\n  spellCorrected\n  originalTerms\n}\n\nfragment InstructionResultList on InstructionResultList {\n  __typename\n  firstRecNum\n  lastRecNum\n  recsPerPage\n  totalNumRecs\n  name\n  records {\n    productDisplayName\n    link\n    label\n    __typename\n  }\n}\n\nfragment OtherInfo on SearchOtherInfo {\n  __typename\n  results {\n    displayName\n    link {\n      navigationState\n      siteState {\n        properties {\n          brandName\n          __typename\n        }\n        companyCode\n        __typename\n      }\n      host\n      __typename\n    }\n    resultCount\n    selected\n    __typename\n  }\n}\n\nfragment ResultTab on SearchResultTab {\n  __typename\n  companyCode\n  resultCount\n  displayName\n  link {\n    navigationState\n    siteState {\n      properties {\n        brandName\n        __typename\n      }\n      companyCode\n      __typename\n    }\n    host\n    __typename\n  }\n  selected\n}\n\nfragment RefinementMenu on SearchRefinementMenu {\n  __typename\n  displayName\n  name\n  ancestors {\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    host\n    label\n    __typename\n  }\n  dimensionName\n  numRefinementsToShowInitially\n  multiSelect\n  refinements {\n    ...RefinementLink\n    __typename\n  }\n  key\n}\n\nfragment RefinementLink on SearchRefinementLink {\n  ... on SearchRefinementPlainLink {\n    __typename\n    navigationState\n    label\n    count\n    multiSelect\n    siteState {\n      companyCode\n      __typename\n    }\n    isSelected\n  }\n  ... on SearchRefinementImageLink {\n    __typename\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    label\n    count\n    multiSelect\n    isSelected\n  }\n  __typename\n}\n\nfragment ProductCarousel on SearchProductCarousel {\n  __typename\n  maxRecordsBasedOnPrevSearch\n  records {\n    recordType\n    product {\n      altImageUrl\n      imageUrl\n      displayName\n      repositoryId\n      colorizable\n      removeFromBrowse\n      priceInfo {\n        currencySymbol\n        isCustomProduct\n        isRetail\n        isUnavailable\n        priceFilter\n        isSale\n        priceMessage\n        priceRange {\n          allOnSale\n          assetId\n          currencyApplied\n          highestFullSkuId\n          highestPaidFullSkuId\n          lowestFullSkuId\n          lowestPaidFullSkuId\n          noPriceRange\n          onClearance\n          onSale\n          onSaleAndOnClearance\n          previewMode\n          salePriceListId\n          tradeBest\n          __typename\n        }\n        rangeType\n        showMemberPrice\n        strikePriceLabel\n        listPrices\n        listPriceLabel\n        salePrices\n        salePriceLabel\n        memberPrices\n        memberPriceLabel\n        __typename\n      }\n      swatchInfo {\n        swatchesToDisplay {\n          imageUrl\n          swatchId\n          __typename\n        }\n        numAdditionalSwatchesAvailable\n        numAdditionalSaleSwatchesAvailable\n        __typename\n      }\n      __typename\n    }\n    sku {\n      fullSkuId\n      __typename\n    }\n    __typename\n  }\n  title\n  name\n}\n\nfragment SaleMemberInfoFields on SaleMemberInfoResponse {\n  __typename\n  pgMemberSavings {\n    ...MemberSavingsFields\n    __typename\n  }\n  pgSaleStats {\n    ...SaleStatsFields\n    __typename\n  }\n}\n\nfragment MemberSavingsFields on PgMemberSaving {\n  __typename\n  count\n  memberSavingsMin\n  memberSavingsMax\n}\n\nfragment SaleStatsFields on PgSaleStats {\n  __typename\n  nonSaleSkus\n  percentSaleSkus\n  saleSkus\n  totalSkus\n}\n\nfragment ATGCollectionGalleryInfo on CollectionCategory {\n  __typename\n  id\n  displayName\n  forceSaleFlag\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">Search</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String) {
  search(
    ntt: $ntt
    contentType: $contentType
    n: $n
    nrpp: $nrpp
    ns: $ns
    no: $no
    country: $country
    currencyCode: $currencyCode
    userType: $userType
    site: $site
    infiniteScroll: $infiniteScroll
    categoryId: $categoryId
    sale: $sale
    locale: $locale
  ) {
    redirectUrl
    stocked
    zeroResults {
      ...ZeroResultFields
      __typename
    }
    adjustedSearches {
      ...AdjustedSearchFields
      __typename
    }
    headerConfig {
      title
      template
      __typename
    }
    sizeFacets
    materialFacets
    resultList {
      lastRecNum
      firstRecNum
      recsPerPage
      totalNumRecs
      records {
        recordType
        product {
          altImageUrl
          imageUrl
          galleryDescription
          alternateImages {
            imageUrl
            __typename
          }
          displayName
          anchor
          repositoryId
          colorizable
          imageFlip
          newProduct
          emptyProduct
          metaProductComponent
          removeFromBrowse
          pgCrop
          pgCropRules
          rhr
          pdpImageLayout
          skuPriceInfo {
            fullSkuId
            currencySymbol
            listPrice
            salePrice
            memberPrice
            tradePrice
            contractPrice
            nextgenDriven
            onSale
            onClearance
            showMemberPrice
            skuOptions {
              id
              optionType
              label
              __typename
            }
            __typename
          }
          metaProduct
          priceInfo {
            currencySymbol
            isCustomProduct
            isRetail
            isUnavailable
            priceFilter
            isSale
            priceMessage
            priceRange {
              allOnSale
              assetId
              currencyApplied
              highestFullSkuId
              highestPaidFullSkuId
              lowestFullSkuId
              lowestPaidFullSkuId
              noPriceRange
              onClearance
              onSale
              onSaleAndOnClearance
              previewMode
              salePriceListId
              tradeBest
              __typename
            }
            rangeType
            showMemberPrice
            strikePriceLabel
            priceMessagePrice
            listPrices
            listPriceLabel
            salePrices
            salePriceLabel
            memberPrices
            memberPriceLabel
            lowestMemberPrice
            lowestSalePrice
            overridePriceLabel
            skulowestListPrice
            skulowestMemberPrice
            skulowestSalePrice
            nextGenDriven
            nextGenDrivenOnSale
            __typename
          }
          swatchInfo {
            swatchesToDisplay {
              imageRef
              imageUrl
              swatchId
              displayName
              __typename
            }
            numAdditionalSwatchesAvailable
            numAdditionalSaleSwatchesAvailable
            __typename
          }
          galleryDescription
          percentSaleSkus
          lowestskuPriceInfo {
            skuListSaleprice
            skuMemberSalePrice
            skuSalePrice
            __typename
          }
          __typename
        }
        sku {
          fullSkuId
          __typename
        }
        __typename
      }
      sortOptions {
        navigationState
        label
        selected
        __typename
      }
      __typename
    }
    resultTabs {
      ...ResultTab
      __typename
    }
    booleanFacets {
      ...RefinementMenu
      __typename
    }
    refinementMenus {
      ...RefinementMenu
      __typename
    }
    otherInfo {
      ...OtherInfo
      __typename
    }
    instructionResultList {
      ...InstructionResultList
      __typename
    }
    productCarousel {
      ...ProductCarousel
      __typename
    }
    promoDisplay {
      ...PromoDisplayFields
      __typename
    }
    searchQueryId
    filterQueries
    skuSearch
    sku_siteId
    ruleExecuted
    saleMemberInfo {
      ...SaleMemberInfoFields
      __typename
    }
    ATGCollectionGalleryInfo {
      collectionGallery {
        ...ATGCollectionGalleryInfo
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment PromoDisplayFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  subItems {
    ...SubItem
    __typename
  }
  template
  text
  imageUrl
  linkType
  linkUrl
  targetUrl
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
  title
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
}

fragment Layer on PromoDisplayLayer {
  __typename
  layerType
  label
  leftCoordinate
  topCoordinate
  flyoutDirection
  dynamicText {
    verticalAlign
    horizontalAlign
    classes
    promoId
    styles
    topCoordinate
    rightCoordinate
    bottomCoordinate
    leftCoordinate
    width
    modalType
    __typename
  }
  htmlText
  shortText
  link
  modal
  path
}

fragment DynamicText on PromoDisplayDynamicText {
  __typename
  layout
  alt
  width
  style
  height
  coords
  productIds
  categoryId
  wistia
  transitionStartStyles
  transitionEndStyles
  transitionInDelay
  exclusionParam
  modalType
  addbanner
  autoplay
  slidetime
  easing
  pauseOnHover
  effecttime
  resetOffScreen
}

fragment CatalogAsset on PromoDisplayCatalogAsset {
  __typename
  skuId
  categoryId
  productId
  leftCoordinate
  topCoordinate
  flyoutDirection
  quickLook
  id
}

fragment SubItem on PromoDisplay {
  __typename
  ...SubItemFields
  subItems {
    ...SubItemFields
    __typename
  }
}

fragment SubItemFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  template
  text
  title
  imageUrl
  linkType
  linkUrl
  targetUrl
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
}

fragment CategoryProductFields on CategoryProduct {
  __typename
  id
  displayName
  imageUrl
  imageFlip
  altImages {
    imageUrl
    __typename
  }
  galleryDescription
  newProduct
  type
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  uxAttributes {
    triggerSwatchImage
    productType
    giftCert
    __typename
  }
  customProduct
  pgCrop
  pgCropRules
  rhr
  pdpImageLayout
  seoDescription
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
  priceRange {
    memberLowestListPrice
    __typename
  }
}

fragment ZeroResultFields on SearchZeroResults {
  __typename
  searchTerms
  otherBrandSearchResults {
    brandResultCount
    brandName
    brandLink {
      navigationState
      siteState {
        companyCode
        properties {
          brandName
          __typename
        }
        __typename
      }
      host
      __typename
    }
    __typename
  }
}

fragment AdjustedSearchFields on AdjustedSearch {
  __typename
  autoPhrased
  adjustedTerms
  spellCorrected
  originalTerms
}

fragment InstructionResultList on InstructionResultList {
  __typename
  firstRecNum
  lastRecNum
  recsPerPage
  totalNumRecs
  name
  records {
    productDisplayName
    link
    label
    __typename
  }
}

fragment OtherInfo on SearchOtherInfo {
  __typename
  results {
    displayName
    link {
      navigationState
      siteState {
        properties {
          brandName
          __typename
        }
        companyCode
        __typename
      }
      host
      __typename
    }
    resultCount
    selected
    __typename
  }
}

fragment ResultTab on SearchResultTab {
  __typename
  companyCode
  resultCount
  displayName
  link {
    navigationState
    siteState {
      properties {
        brandName
        __typename
      }
      companyCode
      __typename
    }
    host
    __typename
  }
  selected
}

fragment RefinementMenu on SearchRefinementMenu {
  __typename
  displayName
  name
  ancestors {
    navigationState
    siteState {
      companyCode
      __typename
    }
    host
    label
    __typename
  }
  dimensionName
  numRefinementsToShowInitially
  multiSelect
  refinements {
    ...RefinementLink
    __typename
  }
  key
}

fragment RefinementLink on SearchRefinementLink {
  ... on SearchRefinementPlainLink {
    __typename
    navigationState
    label
    count
    multiSelect
    siteState {
      companyCode
      __typename
    }
    isSelected
  }
  ... on SearchRefinementImageLink {
    __typename
    navigationState
    siteState {
      companyCode
      __typename
    }
    label
    count
    multiSelect
    isSelected
  }
  __typename
}

fragment ProductCarousel on SearchProductCarousel {
  __typename
  maxRecordsBasedOnPrevSearch
  records {
    recordType
    product {
      altImageUrl
      imageUrl
      displayName
      repositoryId
      colorizable
      removeFromBrowse
      priceInfo {
        currencySymbol
        isCustomProduct
        isRetail
        isUnavailable
        priceFilter
        isSale
        priceMessage
        priceRange {
          allOnSale
          assetId
          currencyApplied
          highestFullSkuId
          highestPaidFullSkuId
          lowestFullSkuId
          lowestPaidFullSkuId
          noPriceRange
          onClearance
          onSale
          onSaleAndOnClearance
          previewMode
          salePriceListId
          tradeBest
          __typename
        }
        rangeType
        showMemberPrice
        strikePriceLabel
        listPrices
        listPriceLabel
        salePrices
        salePriceLabel
        memberPrices
        memberPriceLabel
        __typename
      }
      swatchInfo {
        swatchesToDisplay {
          imageUrl
          swatchId
          __typename
        }
        numAdditionalSwatchesAvailable
        numAdditionalSaleSwatchesAvailable
        __typename
      }
      __typename
    }
    sku {
      fullSkuId
      __typename
    }
    __typename
  }
  title
  name
}

fragment SaleMemberInfoFields on SaleMemberInfoResponse {
  __typename
  pgMemberSavings {
    ...MemberSavingsFields
    __typename
  }
  pgSaleStats {
    ...SaleStatsFields
    __typename
  }
}

fragment MemberSavingsFields on PgMemberSaving {
  __typename
  count
  memberSavingsMin
  memberSavingsMax
}

fragment SaleStatsFields on PgSaleStats {
  __typename
  nonSaleSkus
  percentSaleSkus
  saleSkus
  totalSkus
}

fragment ATGCollectionGalleryInfo on CollectionCategory {
  __typename
  id
  displayName
  forceSaleFlag
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;ntt&quot;: &quot;category:${ProductGalleryId}&quot;,
  &quot;nrpp&quot;: 12,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.9_ProductGallery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductGallery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $parentCatId: String) { productGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode siteId: $siteId measureSystem: $measureSystem locale: $locale parentCatId: $parentCatId ) { amountRemaining nextStart categoryLayout productGallery { ... on CollectionCategory { ...CollectionCategoryFields isAnchor(categoryId: $categoryId, filter: $filter) __typename } ... on CategoryProduct { ...CategoryProductFields __typename } __typename } __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts stockInfo { totalSkus inStock totalInStockSkus __typename } additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductGallery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $parentCatId: String) { productGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode siteId: $siteId measureSystem: $measureSystem locale: $locale parentCatId: $parentCatId ) { amountRemaining nextStart categoryLayout productGallery { ... on CollectionCategory { ...CollectionCategoryFields isAnchor(categoryId: $categoryId, filter: $filter) __typename } ... on CategoryProduct { ...CategoryProductFields __typename } __typename } __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts stockInfo { totalSkus inStock totalInStockSkus __typename } additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="productIds" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">productIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productGallery.productGallery.[*].[?(@.type == &apos;product&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                <stringProp name="TestPlan.comments">$.data.productGallery.productGallery.[*].[?(@.type == &apos;product&apos;)].id</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="productId" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productGallery.productGallery[2].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                <stringProp name="TestPlan.comments">$.data.productGallery.productGallery.[*].[?(@.type == &apos;product&apos;)].id</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="PromoDisplayContent-1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">PromoDisplayContent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">PromoDisplayContent</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.10_GetAemModel-3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/products&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }	</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/products&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.11_GlobalStylesheet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.12_CatalogNavigation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.13_CartProjection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.14_GetBrandSubscriptionsByEmail" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="5.0_Search" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PGTerm" enabled="true">
            <stringProp name="filename">pgterms.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">pgterm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.1_GetUserForSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.2_AboveNavPromo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AboveNavPromo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } } </stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.3_GetAemModel-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.4_CatalogNavigation-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.5_WORHMenu-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.6_WORHMenu-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.7_GetAemModel-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.8_Search" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Search&quot;,&quot;variables&quot;:{
  &quot;ntt&quot;: &quot;${pgterm}&quot;,
  &quot;nrpp&quot;: 12,
  &quot;ns&quot;: &quot;product.sale|1&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
},&quot;query&quot;:&quot;query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String) {\n  search(\n    ntt: $ntt\n    contentType: $contentType\n    n: $n\n    nrpp: $nrpp\n    ns: $ns\n    no: $no\n    country: $country\n    currencyCode: $currencyCode\n    userType: $userType\n    site: $site\n    infiniteScroll: $infiniteScroll\n    categoryId: $categoryId\n    sale: $sale\n    locale: $locale\n  ) {\n    redirectUrl\n    stocked\n    zeroResults {\n      ...ZeroResultFields\n      __typename\n    }\n    adjustedSearches {\n      ...AdjustedSearchFields\n      __typename\n    }\n    headerConfig {\n      title\n      template\n      __typename\n    }\n    sizeFacets\n    materialFacets\n    resultList {\n      lastRecNum\n      firstRecNum\n      recsPerPage\n      totalNumRecs\n      records {\n        recordType\n        product {\n          altImageUrl\n          imageUrl\n          galleryDescription\n          alternateImages {\n            imageUrl\n            __typename\n          }\n          displayName\n          anchor\n          repositoryId\n          colorizable\n          imageFlip\n          newProduct\n          emptyProduct\n          metaProductComponent\n          removeFromBrowse\n          pgCrop\n          pgCropRules\n          rhr\n          pdpImageLayout\n          skuPriceInfo {\n            fullSkuId\n            currencySymbol\n            listPrice\n            salePrice\n            memberPrice\n            tradePrice\n            contractPrice\n            nextgenDriven\n            onSale\n            onClearance\n            showMemberPrice\n            skuOptions {\n              id\n              optionType\n              label\n              __typename\n            }\n            __typename\n          }\n          metaProduct\n          priceInfo {\n            currencySymbol\n            isCustomProduct\n            isRetail\n            isUnavailable\n            priceFilter\n            isSale\n            priceMessage\n            priceRange {\n              allOnSale\n              assetId\n              currencyApplied\n              highestFullSkuId\n              highestPaidFullSkuId\n              lowestFullSkuId\n              lowestPaidFullSkuId\n              noPriceRange\n              onClearance\n              onSale\n              onSaleAndOnClearance\n              previewMode\n              salePriceListId\n              tradeBest\n              __typename\n            }\n            rangeType\n            showMemberPrice\n            strikePriceLabel\n            priceMessagePrice\n            listPrices\n            listPriceLabel\n            salePrices\n            salePriceLabel\n            memberPrices\n            memberPriceLabel\n            lowestMemberPrice\n            lowestSalePrice\n            overridePriceLabel\n            skulowestListPrice\n            skulowestMemberPrice\n            skulowestSalePrice\n            nextGenDriven\n            nextGenDrivenOnSale\n            __typename\n          }\n          swatchInfo {\n            swatchesToDisplay {\n              imageRef\n              imageUrl\n              swatchId\n              displayName\n              __typename\n            }\n            numAdditionalSwatchesAvailable\n            numAdditionalSaleSwatchesAvailable\n            __typename\n          }\n          galleryDescription\n          percentSaleSkus\n          lowestskuPriceInfo {\n            skuListSaleprice\n            skuMemberSalePrice\n            skuSalePrice\n            __typename\n          }\n          __typename\n        }\n        sku {\n          fullSkuId\n          __typename\n        }\n        __typename\n      }\n      sortOptions {\n        navigationState\n        label\n        selected\n        __typename\n      }\n      __typename\n    }\n    resultTabs {\n      ...ResultTab\n      __typename\n    }\n    booleanFacets {\n      ...RefinementMenu\n      __typename\n    }\n    refinementMenus {\n      ...RefinementMenu\n      __typename\n    }\n    otherInfo {\n      ...OtherInfo\n      __typename\n    }\n    instructionResultList {\n      ...InstructionResultList\n      __typename\n    }\n    productCarousel {\n      ...ProductCarousel\n      __typename\n    }\n    promoDisplay {\n      ...PromoDisplayFields\n      __typename\n    }\n    searchQueryId\n    filterQueries\n    skuSearch\n    sku_siteId\n    ruleExecuted\n    saleMemberInfo {\n      ...SaleMemberInfoFields\n      __typename\n    }\n    ATGCollectionGalleryInfo {\n      collectionGallery {\n        ...ATGCollectionGalleryInfo\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PromoDisplayFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  subItems {\n    ...SubItem\n    __typename\n  }\n  template\n  text\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n  title\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Layer on PromoDisplayLayer {\n  __typename\n  layerType\n  label\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  dynamicText {\n    verticalAlign\n    horizontalAlign\n    classes\n    promoId\n    styles\n    topCoordinate\n    rightCoordinate\n    bottomCoordinate\n    leftCoordinate\n    width\n    modalType\n    __typename\n  }\n  htmlText\n  shortText\n  link\n  modal\n  path\n}\n\nfragment DynamicText on PromoDisplayDynamicText {\n  __typename\n  layout\n  alt\n  width\n  style\n  height\n  coords\n  productIds\n  categoryId\n  wistia\n  transitionStartStyles\n  transitionEndStyles\n  transitionInDelay\n  exclusionParam\n  modalType\n  addbanner\n  autoplay\n  slidetime\n  easing\n  pauseOnHover\n  effecttime\n  resetOffScreen\n}\n\nfragment CatalogAsset on PromoDisplayCatalogAsset {\n  __typename\n  skuId\n  categoryId\n  productId\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  quickLook\n  id\n}\n\nfragment SubItem on PromoDisplay {\n  __typename\n  ...SubItemFields\n  subItems {\n    ...SubItemFields\n    __typename\n  }\n}\n\nfragment SubItemFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  template\n  text\n  title\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n}\n\nfragment CategoryProductFields on CategoryProduct {\n  __typename\n  id\n  displayName\n  imageUrl\n  imageFlip\n  altImages {\n    imageUrl\n    __typename\n  }\n  galleryDescription\n  newProduct\n  type\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  uxAttributes {\n    triggerSwatchImage\n    productType\n    giftCert\n    __typename\n  }\n  customProduct\n  pgCrop\n  pgCropRules\n  rhr\n  pdpImageLayout\n  seoDescription\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n  priceRange {\n    memberLowestListPrice\n    __typename\n  }\n}\n\nfragment ZeroResultFields on SearchZeroResults {\n  __typename\n  searchTerms\n  otherBrandSearchResults {\n    brandResultCount\n    brandName\n    brandLink {\n      navigationState\n      siteState {\n        companyCode\n        properties {\n          brandName\n          __typename\n        }\n        __typename\n      }\n      host\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AdjustedSearchFields on AdjustedSearch {\n  __typename\n  autoPhrased\n  adjustedTerms\n  spellCorrected\n  originalTerms\n}\n\nfragment InstructionResultList on InstructionResultList {\n  __typename\n  firstRecNum\n  lastRecNum\n  recsPerPage\n  totalNumRecs\n  name\n  records {\n    productDisplayName\n    link\n    label\n    __typename\n  }\n}\n\nfragment OtherInfo on SearchOtherInfo {\n  __typename\n  results {\n    displayName\n    link {\n      navigationState\n      siteState {\n        properties {\n          brandName\n          __typename\n        }\n        companyCode\n        __typename\n      }\n      host\n      __typename\n    }\n    resultCount\n    selected\n    __typename\n  }\n}\n\nfragment ResultTab on SearchResultTab {\n  __typename\n  companyCode\n  resultCount\n  displayName\n  link {\n    navigationState\n    siteState {\n      properties {\n        brandName\n        __typename\n      }\n      companyCode\n      __typename\n    }\n    host\n    __typename\n  }\n  selected\n}\n\nfragment RefinementMenu on SearchRefinementMenu {\n  __typename\n  displayName\n  name\n  ancestors {\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    host\n    label\n    __typename\n  }\n  dimensionName\n  numRefinementsToShowInitially\n  multiSelect\n  refinements {\n    ...RefinementLink\n    __typename\n  }\n  key\n}\n\nfragment RefinementLink on SearchRefinementLink {\n  ... on SearchRefinementPlainLink {\n    __typename\n    navigationState\n    label\n    count\n    multiSelect\n    siteState {\n      companyCode\n      __typename\n    }\n    isSelected\n  }\n  ... on SearchRefinementImageLink {\n    __typename\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    label\n    count\n    multiSelect\n    isSelected\n  }\n  __typename\n}\n\nfragment ProductCarousel on SearchProductCarousel {\n  __typename\n  maxRecordsBasedOnPrevSearch\n  records {\n    recordType\n    product {\n      altImageUrl\n      imageUrl\n      displayName\n      repositoryId\n      colorizable\n      removeFromBrowse\n      priceInfo {\n        currencySymbol\n        isCustomProduct\n        isRetail\n        isUnavailable\n        priceFilter\n        isSale\n        priceMessage\n        priceRange {\n          allOnSale\n          assetId\n          currencyApplied\n          highestFullSkuId\n          highestPaidFullSkuId\n          lowestFullSkuId\n          lowestPaidFullSkuId\n          noPriceRange\n          onClearance\n          onSale\n          onSaleAndOnClearance\n          previewMode\n          salePriceListId\n          tradeBest\n          __typename\n        }\n        rangeType\n        showMemberPrice\n        strikePriceLabel\n        listPrices\n        listPriceLabel\n        salePrices\n        salePriceLabel\n        memberPrices\n        memberPriceLabel\n        __typename\n      }\n      swatchInfo {\n        swatchesToDisplay {\n          imageUrl\n          swatchId\n          __typename\n        }\n        numAdditionalSwatchesAvailable\n        numAdditionalSaleSwatchesAvailable\n        __typename\n      }\n      __typename\n    }\n    sku {\n      fullSkuId\n      __typename\n    }\n    __typename\n  }\n  title\n  name\n}\n\nfragment SaleMemberInfoFields on SaleMemberInfoResponse {\n  __typename\n  pgMemberSavings {\n    ...MemberSavingsFields\n    __typename\n  }\n  pgSaleStats {\n    ...SaleStatsFields\n    __typename\n  }\n}\n\nfragment MemberSavingsFields on PgMemberSaving {\n  __typename\n  count\n  memberSavingsMin\n  memberSavingsMax\n}\n\nfragment SaleStatsFields on PgSaleStats {\n  __typename\n  nonSaleSkus\n  percentSaleSkus\n  saleSkus\n  totalSkus\n}\n\nfragment ATGCollectionGalleryInfo on CollectionCategory {\n  __typename\n  id\n  displayName\n  forceSaleFlag\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">Search</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String) {
  search(
    ntt: $ntt
    contentType: $contentType
    n: $n
    nrpp: $nrpp
    ns: $ns
    no: $no
    country: $country
    currencyCode: $currencyCode
    userType: $userType
    site: $site
    infiniteScroll: $infiniteScroll
    categoryId: $categoryId
    sale: $sale
    locale: $locale
  ) {
    redirectUrl
    stocked
    zeroResults {
      ...ZeroResultFields
      __typename
    }
    adjustedSearches {
      ...AdjustedSearchFields
      __typename
    }
    headerConfig {
      title
      template
      __typename
    }
    sizeFacets
    materialFacets
    resultList {
      lastRecNum
      firstRecNum
      recsPerPage
      totalNumRecs
      records {
        recordType
        product {
          altImageUrl
          imageUrl
          galleryDescription
          alternateImages {
            imageUrl
            __typename
          }
          displayName
          anchor
          repositoryId
          colorizable
          imageFlip
          newProduct
          emptyProduct
          metaProductComponent
          removeFromBrowse
          pgCrop
          pgCropRules
          rhr
          pdpImageLayout
          skuPriceInfo {
            fullSkuId
            currencySymbol
            listPrice
            salePrice
            memberPrice
            tradePrice
            contractPrice
            nextgenDriven
            onSale
            onClearance
            showMemberPrice
            skuOptions {
              id
              optionType
              label
              __typename
            }
            __typename
          }
          metaProduct
          priceInfo {
            currencySymbol
            isCustomProduct
            isRetail
            isUnavailable
            priceFilter
            isSale
            priceMessage
            priceRange {
              allOnSale
              assetId
              currencyApplied
              highestFullSkuId
              highestPaidFullSkuId
              lowestFullSkuId
              lowestPaidFullSkuId
              noPriceRange
              onClearance
              onSale
              onSaleAndOnClearance
              previewMode
              salePriceListId
              tradeBest
              __typename
            }
            rangeType
            showMemberPrice
            strikePriceLabel
            priceMessagePrice
            listPrices
            listPriceLabel
            salePrices
            salePriceLabel
            memberPrices
            memberPriceLabel
            lowestMemberPrice
            lowestSalePrice
            overridePriceLabel
            skulowestListPrice
            skulowestMemberPrice
            skulowestSalePrice
            nextGenDriven
            nextGenDrivenOnSale
            __typename
          }
          swatchInfo {
            swatchesToDisplay {
              imageRef
              imageUrl
              swatchId
              displayName
              __typename
            }
            numAdditionalSwatchesAvailable
            numAdditionalSaleSwatchesAvailable
            __typename
          }
          galleryDescription
          percentSaleSkus
          lowestskuPriceInfo {
            skuListSaleprice
            skuMemberSalePrice
            skuSalePrice
            __typename
          }
          __typename
        }
        sku {
          fullSkuId
          __typename
        }
        __typename
      }
      sortOptions {
        navigationState
        label
        selected
        __typename
      }
      __typename
    }
    resultTabs {
      ...ResultTab
      __typename
    }
    booleanFacets {
      ...RefinementMenu
      __typename
    }
    refinementMenus {
      ...RefinementMenu
      __typename
    }
    otherInfo {
      ...OtherInfo
      __typename
    }
    instructionResultList {
      ...InstructionResultList
      __typename
    }
    productCarousel {
      ...ProductCarousel
      __typename
    }
    promoDisplay {
      ...PromoDisplayFields
      __typename
    }
    searchQueryId
    filterQueries
    skuSearch
    sku_siteId
    ruleExecuted
    saleMemberInfo {
      ...SaleMemberInfoFields
      __typename
    }
    ATGCollectionGalleryInfo {
      collectionGallery {
        ...ATGCollectionGalleryInfo
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment PromoDisplayFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  subItems {
    ...SubItem
    __typename
  }
  template
  text
  imageUrl
  linkType
  linkUrl
  targetUrl
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
  title
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
}

fragment Layer on PromoDisplayLayer {
  __typename
  layerType
  label
  leftCoordinate
  topCoordinate
  flyoutDirection
  dynamicText {
    verticalAlign
    horizontalAlign
    classes
    promoId
    styles
    topCoordinate
    rightCoordinate
    bottomCoordinate
    leftCoordinate
    width
    modalType
    __typename
  }
  htmlText
  shortText
  link
  modal
  path
}

fragment DynamicText on PromoDisplayDynamicText {
  __typename
  layout
  alt
  width
  style
  height
  coords
  productIds
  categoryId
  wistia
  transitionStartStyles
  transitionEndStyles
  transitionInDelay
  exclusionParam
  modalType
  addbanner
  autoplay
  slidetime
  easing
  pauseOnHover
  effecttime
  resetOffScreen
}

fragment CatalogAsset on PromoDisplayCatalogAsset {
  __typename
  skuId
  categoryId
  productId
  leftCoordinate
  topCoordinate
  flyoutDirection
  quickLook
  id
}

fragment SubItem on PromoDisplay {
  __typename
  ...SubItemFields
  subItems {
    ...SubItemFields
    __typename
  }
}

fragment SubItemFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  template
  text
  title
  imageUrl
  linkType
  linkUrl
  targetUrl
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
}

fragment CategoryProductFields on CategoryProduct {
  __typename
  id
  displayName
  imageUrl
  imageFlip
  altImages {
    imageUrl
    __typename
  }
  galleryDescription
  newProduct
  type
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  uxAttributes {
    triggerSwatchImage
    productType
    giftCert
    __typename
  }
  customProduct
  pgCrop
  pgCropRules
  rhr
  pdpImageLayout
  seoDescription
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
  priceRange {
    memberLowestListPrice
    __typename
  }
}

fragment ZeroResultFields on SearchZeroResults {
  __typename
  searchTerms
  otherBrandSearchResults {
    brandResultCount
    brandName
    brandLink {
      navigationState
      siteState {
        companyCode
        properties {
          brandName
          __typename
        }
        __typename
      }
      host
      __typename
    }
    __typename
  }
}

fragment AdjustedSearchFields on AdjustedSearch {
  __typename
  autoPhrased
  adjustedTerms
  spellCorrected
  originalTerms
}

fragment InstructionResultList on InstructionResultList {
  __typename
  firstRecNum
  lastRecNum
  recsPerPage
  totalNumRecs
  name
  records {
    productDisplayName
    link
    label
    __typename
  }
}

fragment OtherInfo on SearchOtherInfo {
  __typename
  results {
    displayName
    link {
      navigationState
      siteState {
        properties {
          brandName
          __typename
        }
        companyCode
        __typename
      }
      host
      __typename
    }
    resultCount
    selected
    __typename
  }
}

fragment ResultTab on SearchResultTab {
  __typename
  companyCode
  resultCount
  displayName
  link {
    navigationState
    siteState {
      properties {
        brandName
        __typename
      }
      companyCode
      __typename
    }
    host
    __typename
  }
  selected
}

fragment RefinementMenu on SearchRefinementMenu {
  __typename
  displayName
  name
  ancestors {
    navigationState
    siteState {
      companyCode
      __typename
    }
    host
    label
    __typename
  }
  dimensionName
  numRefinementsToShowInitially
  multiSelect
  refinements {
    ...RefinementLink
    __typename
  }
  key
}

fragment RefinementLink on SearchRefinementLink {
  ... on SearchRefinementPlainLink {
    __typename
    navigationState
    label
    count
    multiSelect
    siteState {
      companyCode
      __typename
    }
    isSelected
  }
  ... on SearchRefinementImageLink {
    __typename
    navigationState
    siteState {
      companyCode
      __typename
    }
    label
    count
    multiSelect
    isSelected
  }
  __typename
}

fragment ProductCarousel on SearchProductCarousel {
  __typename
  maxRecordsBasedOnPrevSearch
  records {
    recordType
    product {
      altImageUrl
      imageUrl
      displayName
      repositoryId
      colorizable
      removeFromBrowse
      priceInfo {
        currencySymbol
        isCustomProduct
        isRetail
        isUnavailable
        priceFilter
        isSale
        priceMessage
        priceRange {
          allOnSale
          assetId
          currencyApplied
          highestFullSkuId
          highestPaidFullSkuId
          lowestFullSkuId
          lowestPaidFullSkuId
          noPriceRange
          onClearance
          onSale
          onSaleAndOnClearance
          previewMode
          salePriceListId
          tradeBest
          __typename
        }
        rangeType
        showMemberPrice
        strikePriceLabel
        listPrices
        listPriceLabel
        salePrices
        salePriceLabel
        memberPrices
        memberPriceLabel
        __typename
      }
      swatchInfo {
        swatchesToDisplay {
          imageUrl
          swatchId
          __typename
        }
        numAdditionalSwatchesAvailable
        numAdditionalSaleSwatchesAvailable
        __typename
      }
      __typename
    }
    sku {
      fullSkuId
      __typename
    }
    __typename
  }
  title
  name
}

fragment SaleMemberInfoFields on SaleMemberInfoResponse {
  __typename
  pgMemberSavings {
    ...MemberSavingsFields
    __typename
  }
  pgSaleStats {
    ...SaleStatsFields
    __typename
  }
}

fragment MemberSavingsFields on PgMemberSaving {
  __typename
  count
  memberSavingsMin
  memberSavingsMax
}

fragment SaleStatsFields on PgSaleStats {
  __typename
  nonSaleSkus
  percentSaleSkus
  saleSkus
  totalSkus
}

fragment ATGCollectionGalleryInfo on CollectionCategory {
  __typename
  id
  displayName
  forceSaleFlag
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;ntt&quot;: &quot;${pgterm}&quot;,
  &quot;nrpp&quot;: 12,
  &quot;ns&quot;: &quot;product.sale|1&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="PromoDisplayContent-1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">PromoDisplayContent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">PromoDisplayContent</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.9_GetAemModel-3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/results&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/results&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.10_GlobalStylesheet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.11_CatalogNavigation-2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.12_CartProjection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.13_GetBrandSubscriptionsByEmail" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.0_Product Details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PDPs" enabled="true">
            <stringProp name="filename">PDPs.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">productId</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.0_Product Details" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_GetUserForSession" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserForSession</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
              <intProp name="MAX_THREAD_NUMBER">6</intProp>
              <boolProp name="PARENT_SAMPLE">false</boolProp>
              <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.1_AboveNavPromo" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">AboveNavPromo</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.2_GetAemModel-1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.3_CatalogNavigation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">CatalogNavigation</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.4_WORHMenu-1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">WORHMenu</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.5_WORHMenu-2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">WORHMenu</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.6_GetAemModel-2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/product&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/product&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.7_GiftCardTerms" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GiftCardTerms</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GiftCardTerms($key: String = &quot;&quot;) { contentFragment(group: &quot;pages&quot;, key: $key) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;key&quot;: &quot;rh-gift-card-pdp&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GiftCardTerms</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GiftCardTerms($key: String = &quot;&quot;) { contentFragment(group: &quot;pages&quot;, key: $key) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;key&quot;: &quot;rh-gift-card-pdp&quot;
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.8_Product" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">Product</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String) { product( productId: $productId categoryId: $categoryId filter: $filter userType: $userType currencyCode: $currencyCode siteId: $siteId measureSystem: $measureSystem locale: $locale ) { __typename ...ProductFields } } fragment ProductFields on Product { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) { productId adapter splitDisplay faceoutSwatchId swatchGroups { swatchGroupName groupMaterial swatchGroupIndex sortPriority stockedSwatches { ...Swatch __typename } customSwatches { ...Swatch __typename } __typename } finishSwatchGroups { swatchGroupName groupMaterial swatchGroupIndex sortPriority stockedSwatches { ...Swatch __typename } __typename } __typename } customProductType swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } carouselProdctDetails { imageUrl displayName productId sale __typename } customProduct productOptionGroupBean { title optionsList __typename } swatchBean { swatchId primaryOptionId __typename } } fragment BaseProductFields on Product { isActive endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId __typename } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } priceRangeMultiSkuDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } skuPriceInfo { ...SkuSalePrice __typename } multiSkuPriceInfo { ...SkuSalePrice __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords multiSkuAdditionalMessage relatedProductIds saleSwatchId productMessage __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment SkuSalePrice on SkuSalePrice { __typename skuListSaleprice skuMemberSalePrice skuSalePrice isMultiSku } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment Swatch on ProductSwatch { __typename swatchId title sortPriority swatchGroupIndex details colorize imageUrl primaryOptionId secondaryOptionId relatedSwatchBeans { swatchId title sortPriority swatchGroupIndex details colorize imageUrl primaryOptionId secondaryOptionId optionCopy options { id label optionType sortPriority __typename } swatchImageSm { url width height __typename } swatchImageLg { url width height __typename } __typename } optionCopy options { id label optionType sortPriority __typename } swatchImageSm { url width height __typename } swatchImageLg { url width height __typename } onSale } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">Product</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String) { product( productId: $productId categoryId: $categoryId filter: $filter userType: $userType currencyCode: $currencyCode siteId: $siteId measureSystem: $measureSystem locale: $locale ) { __typename ...ProductFields } } fragment ProductFields on Product { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) { productId adapter splitDisplay faceoutSwatchId swatchGroups { swatchGroupName groupMaterial swatchGroupIndex sortPriority stockedSwatches { ...Swatch __typename } customSwatches { ...Swatch __typename } __typename } finishSwatchGroups { swatchGroupName groupMaterial swatchGroupIndex sortPriority stockedSwatches { ...Swatch __typename } __typename } __typename } customProductType swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } carouselProdctDetails { imageUrl displayName productId sale __typename } customProduct productOptionGroupBean { title optionsList __typename } swatchBean { swatchId primaryOptionId __typename } } fragment BaseProductFields on Product { isActive endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId __typename } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } priceRangeMultiSkuDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } skuPriceInfo { ...SkuSalePrice __typename } multiSkuPriceInfo { ...SkuSalePrice __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords multiSkuAdditionalMessage relatedProductIds saleSwatchId productMessage __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment SkuSalePrice on SkuSalePrice { __typename skuListSaleprice skuMemberSalePrice skuSalePrice isMultiSku } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment Swatch on ProductSwatch { __typename swatchId title sortPriority swatchGroupIndex details colorize imageUrl primaryOptionId secondaryOptionId relatedSwatchBeans { swatchId title sortPriority swatchGroupIndex details colorize imageUrl primaryOptionId secondaryOptionId optionCopy options { id label optionType sortPriority __typename } swatchImageSm { url width height __typename } swatchImageLg { url width height __typename } __typename } optionCopy options { id label optionType sortPriority __typename } swatchImageSm { url width height __typename } swatchImageLg { url width height __typename } onSale } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct1" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct1</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds.[*]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOptions" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">availableOptions</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.productLineItem.availableOptions.[*]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.9_UpsellProducts" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">UpsellProducts</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query UpsellProducts($productId: String!, $locale: String, $measureSystem: String, $currencyCode: String, $siteId: String, $userType: String) { upsellProducts( productId: $productId locale: $locale measureSystem: $measureSystem currencyCode: $currencyCode siteId: $siteId userType: $userType ) { upsellProducts { id type displayName imageUrl galleryDescription newProduct template pgCrop pgCropRules uxAttributes { productType triggerSwatchImage giftCert __typename } priceRangeDisplay { rangeType isSale isUnavailable showMemberPrice isRetail isCustomProduct priceRange { lowestListPrice highestListPrice lowestPricePaid highestPricePaid previewMode memberLowestListPrice memberHighestListPrice memberLowestPricePaid memberHighestPricePaid onSale onClearance onSaleAndOnClearance allOnSale noPriceRange tradeBest saleSkuId finalSaleSkuId saleSwatchId finalSaleSwatchId currencyApplied highestFullSkuId lowestFullSkuId highestPaidFullSkuId lowestPaidFullSkuId assetId salePriceListId __typename } listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol priceFilter nextGenDriven nextGenDrivenOnSale __typename } skuPriceInfo { skuListSaleprice skuMemberSalePrice skuSalePrice __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } index rangeId parentCategoryId __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">UpsellProducts</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query UpsellProducts($productId: String!, $locale: String, $measureSystem: String, $currencyCode: String, $siteId: String, $userType: String) { upsellProducts( productId: $productId locale: $locale measureSystem: $measureSystem currencyCode: $currencyCode siteId: $siteId userType: $userType ) { upsellProducts { id type displayName imageUrl galleryDescription newProduct template pgCrop pgCropRules uxAttributes { productType triggerSwatchImage giftCert __typename } priceRangeDisplay { rangeType isSale isUnavailable showMemberPrice isRetail isCustomProduct priceRange { lowestListPrice highestListPrice lowestPricePaid highestPricePaid previewMode memberLowestListPrice memberHighestListPrice memberLowestPricePaid memberHighestPricePaid onSale onClearance onSaleAndOnClearance allOnSale noPriceRange tradeBest saleSkuId finalSaleSkuId saleSwatchId finalSaleSwatchId currencyApplied highestFullSkuId lowestFullSkuId highestPaidFullSkuId lowestPaidFullSkuId assetId salePriceListId __typename } listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol priceFilter nextGenDriven nextGenDrivenOnSale __typename } skuPriceInfo { skuListSaleprice skuMemberSalePrice skuSalePrice __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } index rangeId parentCategoryId __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.10_ProductSwatchImage-1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductSwatchImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductSwatchImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="PromoDisplayContent-1" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">PromoDisplayContent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">PromoDisplayContent</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.11_GetAemModel-3" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.12_GlobalStylesheet" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.13_CatalogNavigation-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.14_RelatedProductsQuery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">RelatedProductsQuery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query RelatedProductsQuery($productIds: [String!]!, $filter: String, $currencyCode: String, $measureSystem: String, $locale: String, $siteId: String, $categoryId: String, $userType: String) { relatedProductsQuery( productIds: $productIds filter: $filter currencyCode: $currencyCode measureSystem: $measureSystem locale: $locale siteId: $siteId categoryId: $categoryId userType: $userType ) { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } } } fragment BaseProductFields on Product { isActive endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId __typename } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } priceRangeMultiSkuDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } skuPriceInfo { ...SkuSalePrice __typename } multiSkuPriceInfo { ...SkuSalePrice __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords multiSkuAdditionalMessage relatedProductIds saleSwatchId productMessage __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment SkuSalePrice on SkuSalePrice { __typename skuListSaleprice skuMemberSalePrice skuSalePrice isMultiSku } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productIds&quot;: ${RelatedProduct2},
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">RelatedProductsQuery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query RelatedProductsQuery($productIds: [String!]!, $filter: String, $currencyCode: String, $measureSystem: String, $locale: String, $siteId: String, $categoryId: String, $userType: String) { relatedProductsQuery( productIds: $productIds filter: $filter currencyCode: $currencyCode measureSystem: $measureSystem locale: $locale siteId: $siteId categoryId: $categoryId userType: $userType ) { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } } } fragment BaseProductFields on Product { isActive endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId __typename } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } priceRangeMultiSkuDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } skuPriceInfo { ...SkuSalePrice __typename } multiSkuPriceInfo { ...SkuSalePrice __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords multiSkuAdditionalMessage relatedProductIds saleSwatchId productMessage __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment SkuSalePrice on SkuSalePrice { __typename skuListSaleprice skuMemberSalePrice skuSalePrice isMultiSku } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productIds&quot;: ${RelatedProduct2},
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">int count = Integer.parseInt(vars.get(&quot;RelatedProduct1_matchNr&quot;));
String delimiter = &quot;,&quot;;
StringBuffer sb = new StringBuffer();
for(int i=1;i&lt;=count;i++) { 
 sb.append(vars.get(&quot;RelatedProduct1_&quot; + i));
 if (i == count){
 break; //to eliminate comma after the array
 }else {
  sb.append(delimiter);
 }
}
 vars.put(&quot;RelatedProduct2&quot;,sb.toString());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.15_LineItemQuery-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">LineItemQuery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - RelatedProduct_matchNr" enabled="true">
              <stringProp name="IfController.condition">${__jexl3( ${RelatedProduct_matchNr} &gt; 0,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">RelatedProduct</stringProp>
                <stringProp name="ForeachController.returnVal">RelatedProduct</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${RelatedProduct_matchNr}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">Counter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.16_LineItemQuery-2_RelatedProduct" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">LineItemQuery</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}-concierge.restorationhardware.com/</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">LineItemQuery</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}-concierge.restorationhardware.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - availableOptions_matchNr" enabled="true">
              <stringProp name="IfController.condition">${__jexl3( ${availableOptions_matchNr} &gt; 0,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.17_LineItemQuery-1_MainProduct" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;RH END CUSTOMER&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;RH END CUSTOMER&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}-concierge.restorationhardware.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}-concierge.restorationhardware.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">availableOptions</stringProp>
                <stringProp name="ForeachController.returnVal">availableOption</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${availableOptions_matchNr}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">Counter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.18_LineItemQuery-3_MainProduct" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">LineItemQuery</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <boolProp name="HTTPSampler.image_parser">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                  <boolProp name="HTTPSampler.md5">false</boolProp>
                  <intProp name="HTTPSampler.ipSourceType">0</intProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}-concierge.restorationhardware.com/location-select</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">LineItemQuery</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}-concierge.restorationhardware.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="false">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionId&quot;, selectedOptionIds)</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.19_LineItemQuery-4_MainProduct" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItem __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } webPurchasable canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}-concierge.restorationhardware.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}-concierge.restorationhardware.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.20_ProductSwatchImage-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductSwatchImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductSwatchImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.21_CartProjection" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_GetBrandSubscriptionsByEmail" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="7.0_AddToCart" enabled="false">
          <stringProp name="IfController.condition">${__jexl3( ${fullSkuId_matchNr} &gt; 0 &amp;&amp; ${inventoryRemaining} &gt; 0,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="7.0_AddToCart" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="7.1_AddLineItemsToCart" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AddLineItemsToCart&quot;,&quot;variables&quot;:{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;lineItemsInput&quot;: {
    &quot;items&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;sku&quot;: &quot;${fullSkuId}&quot;,
        &quot;fusionId&quot;: &quot;&quot;,
        &quot;quantity&quot;: 1,
        &quot;brand&quot;: &quot;RH&quot;,
        &quot;giftTo&quot;: &quot;&quot;,
        &quot;giftFrom&quot;: &quot;&quot;,
        &quot;giftMessage&quot;: &quot;&quot;,
        &quot;spoTermsAccepted&quot;: false,
        &quot;spoTerms&quot;: null
      }
    ]
  }
},&quot;query&quot;:&quot;mutation AddLineItemsToCart($email: String!, $cartId: String!, $lineItemsInput: LineItemsInput!) {\n  addLineItemsToCart(\n    email: $email\n    cartId: $cartId\n    lineItemsInput: $lineItemsInput\n  ) {\n    id\n    createdAt\n    lastModifiedAt\n    cartPrice {\n      currencyCode\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AddLineItemsToCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation AddLineItemsToCart($email: String!, $cartId: String!, $lineItemsInput: LineItemsInput!) {
  addLineItemsToCart(
    email: $email
    cartId: $cartId
    lineItemsInput: $lineItemsInput
  ) {
    id
    createdAt
    lastModifiedAt
    cartPrice {
      currencyCode
      __typename
    }
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;lineItemsInput&quot;: {
    &quot;items&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;sku&quot;: &quot;${fullSkuId}&quot;,
        &quot;fusionId&quot;: &quot;&quot;,
        &quot;quantity&quot;: 1,
        &quot;brand&quot;: &quot;RH&quot;,
        &quot;giftTo&quot;: &quot;&quot;,
        &quot;giftFrom&quot;: &quot;&quot;,
        &quot;giftMessage&quot;: &quot;&quot;,
        &quot;spoTermsAccepted&quot;: false,
        &quot;spoTerms&quot;: null
      }
    ]
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="7.2_CartProjection" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="8.0_ViewCart" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.1_GetUserForSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.2_AboveNavPromo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AboveNavPromo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode ) { text __typename } } </stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.3_GetAemModel-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.4_CatalogNavigation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.5_WORHMenu-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25070049&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.6_WORHMenu-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.7_GetAemModel-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="PromoDisplayContent-1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">PromoDisplayContent</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">PromoDisplayContent</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.8_GetAemModel-3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/shopping-cart&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/shopping-cart&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.9_GlobalStylesheet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.10_CatalogNavigation-2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-en&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.11_CartProjection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.12_GetBrandSubscriptionsByEmail" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.13_GetCartPageShoppingCart" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetCartPageShoppingCart</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetCartPageShoppingCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetCartPageShoppingCart</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetCartPageShoppingCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.14_MemberPrice" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">MemberPrice</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query MemberPrice($country: String!, $brand: String!) { memberPrice(country: $country, brand: $brand) }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;brand&quot;: &quot;RH&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">MemberPrice</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query MemberPrice($country: String!, $brand: String!) { memberPrice(country: $country, brand: $brand) }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;brand&quot;: &quot;RH&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.15_ProductImage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">ProductImage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!]) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds ) { productId imageUrl __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!]) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds ) { productId imageUrl __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.16_SkuRestrictions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SkuRestrictions</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SkuRestrictions($fullSkuId: String!, $productId: String, $monogram: Boolean, $qty: Float) { skuRestrictions( fullSkuId: $fullSkuId productId: $productId monogram: $monogram qty: $qty ) { spo membershipSku returnPolicyMessage restockingFee countryRestrictions mattressFeeLocation preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;qty&quot;: 1,
  &quot;monogram&quot;: false
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SkuRestrictions</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SkuRestrictions($fullSkuId: String!, $productId: String, $monogram: Boolean, $qty: Float) { skuRestrictions( fullSkuId: $fullSkuId productId: $productId monogram: $monogram qty: $qty ) { spo membershipSku returnPolicyMessage restockingFee countryRestrictions mattressFeeLocation preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;qty&quot;: 1,
  &quot;monogram&quot;: false
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="9.0_CheckoutAsGuest" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.1_GetAemModel-1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/checkout-sign-in-register&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/checkout-sign-in-register&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.2_GetUserForSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.3_GetAemModel-2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/address&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/address&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.4_GetUserPayments" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserPayments</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserPayments($userId: String!) { getUserPaymentMethods(userId: $userId) { userCardInfo { shopperRef cardInfo { pcid cardType expiryMonth expiryYear defaultCard __typename } billToAddress { firstName lastName companyName line1 line2 city state postalCode country phoneNumber __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserPayments</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserPayments($userId: String!) { getUserPaymentMethods(userId: $userId) { userCardInfo { shopperRef cardInfo { pcid cardType expiryMonth expiryYear defaultCard __typename } billToAddress { firstName lastName companyName line1 line2 city state postalCode country phoneNumber __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.5_GetCart" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetCart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10.0_ContinueToShippinngAddress" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.1_AnonymousToGuest" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AnonymousToGuest&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;cartId&quot;: &quot;${currentCartId}&quot;,
    &quot;userId&quot;: &quot;${userId}&quot;,
    &quot;email&quot;: &quot;${email}&quot;,
    &quot;firstName&quot;: &quot;Mathew&quot;,
    &quot;lastName&quot;: &quot;Thomas&quot;
  },
  &quot;region&quot;: &quot;US&quot;
},&quot;query&quot;:&quot;mutation AnonymousToGuest($input: AnonymousToGuestInput!, $region: String) {\n  anonymousToGuest(input: $input, region: $region) {\n    id\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AnonymousToGuest</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation AnonymousToGuest($input: AnonymousToGuestInput!, $region: String) {
  anonymousToGuest(input: $input, region: $region) {
    id
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;cartId&quot;: &quot;${currentCartId}&quot;,
    &quot;userId&quot;: &quot;${userId}&quot;,
    &quot;email&quot;: &quot;${email}&quot;,
    &quot;firstName&quot;: &quot;Mathew&quot;,
    &quot;lastName&quot;: &quot;Thomas&quot;
  },
  &quot;region&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.2_GetUserForSession" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.3_ValidatePostalCodeByCountryCode" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ValidatePostalCodeByCountryCode</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ValidatePostalCodeByCountryCode($countryCode: String!, $postalCode: String!) { validatePostalCodeByCountryCode( countryCode: $countryCode postalCode: $postalCode ) { ...PostalCodeValidation __typename } } fragment PostalCodeValidation on PostalCodeByCountryCodeResult { isValid __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ValidatePostalCodeByCountryCode</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ValidatePostalCodeByCountryCode($countryCode: String!, $postalCode: String!) { validatePostalCodeByCountryCode( countryCode: $countryCode postalCode: $postalCode ) { ...PostalCodeValidation __typename } } fragment PostalCodeValidation on PostalCodeByCountryCodeResult { isValid __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.4_AVSVerifyAddresses" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AVSVerifyAddresses</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AVSVerifyAddresses($addresses: AddressValidationListInput!, $email: String, $firstName: String, $lastName: String) { AVSVerifyAddresses( addresses: $addresses email: $email firstName: $firstName lastName: $lastName ) { ...AVSAddressValidation __typename } } fragment AVSAddressValidation on AVSAddressListValidationOutputType { records { AddressVerified AvsResponseCode AvsResponseDecision ResponseStatus Address { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } RecomendedAddresses { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } customerMessages addressType __typename } totalRecords __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;addresses&quot;: {
    &quot;records&quot;: [
      {
        &quot;addressType&quot;: &quot;shippingAddress&quot;,
        &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
        &quot;addressLine2&quot;: &quot;&quot;,
        &quot;city&quot;: &quot;Corte Madera&quot;,
        &quot;state&quot;: &quot;CA&quot;,
        &quot;postalCode&quot;: &quot;94925&quot;,
        &quot;countryCode&quot;: &quot;US&quot;,
        &quot;phone&quot;: &quot;3513213212&quot;,
        &quot;eveningPhone&quot;: &quot;&quot;
      }
    ]
  },
  &quot;firstName&quot;: null,
  &quot;lastName&quot;: null,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AVSVerifyAddresses</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AVSVerifyAddresses($addresses: AddressValidationListInput!, $email: String, $firstName: String, $lastName: String) { AVSVerifyAddresses( addresses: $addresses email: $email firstName: $firstName lastName: $lastName ) { ...AVSAddressValidation __typename } } fragment AVSAddressValidation on AVSAddressListValidationOutputType { records { AddressVerified AvsResponseCode AvsResponseDecision ResponseStatus Address { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } RecomendedAddresses { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } customerMessages addressType __typename } totalRecords __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;addresses&quot;: {
    &quot;records&quot;: [
      {
        &quot;addressType&quot;: &quot;shippingAddress&quot;,
        &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
        &quot;addressLine2&quot;: &quot;&quot;,
        &quot;city&quot;: &quot;Corte Madera&quot;,
        &quot;state&quot;: &quot;CA&quot;,
        &quot;postalCode&quot;: &quot;94925&quot;,
        &quot;countryCode&quot;: &quot;US&quot;,
        &quot;phone&quot;: &quot;3513213212&quot;,
        &quot;eveningPhone&quot;: &quot;&quot;
      }
    ]
  },
  &quot;firstName&quot;: null,
  &quot;lastName&quot;: null,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.5_updateCart" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;updateCart&quot;,&quot;variables&quot;:{
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;shouldEnhance&quot;: false
},&quot;query&quot;:&quot;mutation updateCart($email: String!, $cartId: String!, $updateCartInfo: UpdateCartInfo!) {\n  updateCart(email: $email, cartId: $cartId, updateCartInfo: $updateCartInfo) {\n    ...Cart\n    __typename\n  }\n}\n\nfragment Cart on CartType {\n  __typename\n  id\n  requestedDeliveryDate\n  postalCode\n  country\n  coordGroupType\n  coordGroupGroupable\n  coordGroupUserSelected\n  orderNumber\n  cartSavings\n  isUserMember\n  giftBoxFee\n  hasGiftBox\n  hasGiftFromRegistry\n  hasGiftFromMemberRegistry\n  giftRegistryIdList\n  rushShippable\n  guest {\n    userId\n    ctId\n    atgUserId\n    cwUserId\n    email\n    type\n    typeId\n    sourceCode\n    shopperRef\n    __typename\n  }\n  removedItems {\n    invalidRegion {\n      sku\n      product {\n        displayName\n        imageUrl\n        targetUrl\n        alternateImages {\n          imageUrl\n          caption\n          __typename\n        }\n        colorizeInfo {\n          colorizable\n          colorizeType\n          multicolor\n          __typename\n        }\n        __typename\n      }\n      options {\n        id\n        type\n        value\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  lineItems {\n    restrictions {\n      ...LineItemRestrictions\n      __typename\n    }\n    restrictionsApply\n    giftFrom\n    giftTo\n    personalizeInfo {\n      feeHigh\n      feeLow\n      selectedFont {\n        id\n        displayName\n        previewImage\n        image\n        borders {\n          id\n          __typename\n        }\n        __typename\n      }\n      selectedBorder {\n        id\n        image\n        displayName\n        minLength\n        maxLength\n        numberOfLines\n        __typename\n      }\n      selectedStyle {\n        id\n        image\n        minLength\n        maxLength\n        numberOfLines\n        displayName\n        previewImage\n        __typename\n      }\n      selectedColor {\n        id\n        displayName\n        image\n        __typename\n      }\n      __typename\n    }\n    isMonogramFee\n    shouldWaiveMonogramFee\n    shipVia\n    shipViaCode\n    isMonogrammable\n    isPersonalizable\n    fusionId\n    monogram {\n      styleId\n      description\n      maxLines\n      fontCode\n      fontColorCode\n      borderCode\n      lines\n      fulfillmentCode\n      __typename\n    }\n    lineId\n    quantity\n    maxCartQuantity\n    sku\n    skuType\n    multiSkuId\n    brand\n    displayName\n    giftBoxDetail {\n      giftBoxFee\n      giftBoxCurrencyCode\n      __typename\n    }\n    giftWrap\n    deliveryEta\n    deliveryEtaStart\n    deliveryEtaEnd\n    coordGroup\n    registryId\n    spoTerms\n    spoTermsAccepted\n    spoTermsAcceptedDate\n    isMembershipSku\n    availabilityInfo {\n      displayText\n      type\n      props {\n        href\n        __typename\n      }\n      __typename\n    }\n    deliveryInfo {\n      displayText\n      type\n      props {\n        href\n        __typename\n      }\n      __typename\n    }\n    productId\n    product {\n      displayName\n      imageUrl\n      targetUrl\n      alternateImages {\n        imageUrl\n        caption\n        __typename\n      }\n      colorizeInfo {\n        colorizable\n        colorizeType\n        multicolor\n        __typename\n      }\n      __typename\n    }\n    price {\n      itemPrice\n      memberPrice\n      priceStatus\n      priceType\n      currencyCode\n      originalPrice\n      totalPrice\n      salePrice\n      finalPrice\n      salePriceLabel\n      isOnClearance\n      isOnSale\n      showMemberPrice\n      fees\n      itemShippingSurcharge\n      __typename\n    }\n    options {\n      id\n      type\n      value\n      sortPriority\n      __typename\n    }\n    isGiftFromRegistry\n    webPurchasable\n    linkedLineItemId\n    skuCustomization {\n      type\n      mountType\n      lining\n      panel\n      controlType\n      controlPosition\n      controlLength\n      tiltType\n      controlAndTilt\n      trim\n      width\n      length\n      diameter\n      roomLabel\n      bracketColor\n      rollType\n      fulfillmentCode\n      __typename\n    }\n    childSafety\n    availabilityStatus\n    __typename\n  }\n  shipVia\n  cartPrice {\n    subtotal\n    tax\n    taxDetail {\n      amount\n      name\n      country\n      state\n      imposition\n      rate\n      __typename\n    }\n    totalPrice\n    feeTotal\n    currencyCode\n    isFree\n    fees {\n      feeType\n      quantity\n      value\n      unitCost\n      linkedLineItemId\n      __typename\n    }\n    freight {\n      unlimited\n      ground\n      next\n      second\n      shippingSurcharge\n      __typename\n    }\n    discounts {\n      discountCodeTotal\n      __typename\n    }\n    preBillAmount\n    remainingToBill\n    memberSavings\n    employeeSavings\n    __typename\n  }\n  shipAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  billAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  payments {\n    totalAmountRemaining\n    totalAmountCovered\n    appliedPayments {\n      id\n      paymentMethodType\n      paymentType\n      lastFour\n      amountCovered\n      currencyCode\n      rhPaymentPlan\n      catchAllPayment\n      __typename\n    }\n    __typename\n  }\n  importantInformation {\n    type\n    displayText\n    __typename\n  }\n  createdAt\n  lastModifiedAt\n  totalLines\n  discountCodes {\n    code\n    name\n    description\n    __typename\n  }\n  brand\n  gallery {\n    galleryId\n    __typename\n  }\n  shipLabelSidemark\n  giftMessage\n  employeeDiscount {\n    description\n    regularDiscount\n    saleDiscount\n    __typename\n  }\n}\n\nfragment LineItemRestrictions on LineItemRestrictionsType {\n  type\n  sku\n  category\n  states\n  countries\n  postalRanges\n  __typename\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">updateCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation updateCart($email: String!, $cartId: String!, $updateCartInfo: UpdateCartInfo!) {
  updateCart(email: $email, cartId: $cartId, updateCartInfo: $updateCartInfo) {
    ...Cart
    __typename
  }
}

fragment Cart on CartType {
  __typename
  id
  requestedDeliveryDate
  postalCode
  country
  coordGroupType
  coordGroupGroupable
  coordGroupUserSelected
  orderNumber
  cartSavings
  isUserMember
  giftBoxFee
  hasGiftBox
  hasGiftFromRegistry
  hasGiftFromMemberRegistry
  giftRegistryIdList
  rushShippable
  guest {
    userId
    ctId
    atgUserId
    cwUserId
    email
    type
    typeId
    sourceCode
    shopperRef
    __typename
  }
  removedItems {
    invalidRegion {
      sku
      product {
        displayName
        imageUrl
        targetUrl
        alternateImages {
          imageUrl
          caption
          __typename
        }
        colorizeInfo {
          colorizable
          colorizeType
          multicolor
          __typename
        }
        __typename
      }
      options {
        id
        type
        value
        __typename
      }
      __typename
    }
    __typename
  }
  lineItems {
    restrictions {
      ...LineItemRestrictions
      __typename
    }
    restrictionsApply
    giftFrom
    giftTo
    personalizeInfo {
      feeHigh
      feeLow
      selectedFont {
        id
        displayName
        previewImage
        image
        borders {
          id
          __typename
        }
        __typename
      }
      selectedBorder {
        id
        image
        displayName
        minLength
        maxLength
        numberOfLines
        __typename
      }
      selectedStyle {
        id
        image
        minLength
        maxLength
        numberOfLines
        displayName
        previewImage
        __typename
      }
      selectedColor {
        id
        displayName
        image
        __typename
      }
      __typename
    }
    isMonogramFee
    shouldWaiveMonogramFee
    shipVia
    shipViaCode
    isMonogrammable
    isPersonalizable
    fusionId
    monogram {
      styleId
      description
      maxLines
      fontCode
      fontColorCode
      borderCode
      lines
      fulfillmentCode
      __typename
    }
    lineId
    quantity
    maxCartQuantity
    sku
    skuType
    multiSkuId
    brand
    displayName
    giftBoxDetail {
      giftBoxFee
      giftBoxCurrencyCode
      __typename
    }
    giftWrap
    deliveryEta
    deliveryEtaStart
    deliveryEtaEnd
    coordGroup
    registryId
    spoTerms
    spoTermsAccepted
    spoTermsAcceptedDate
    isMembershipSku
    availabilityInfo {
      displayText
      type
      props {
        href
        __typename
      }
      __typename
    }
    deliveryInfo {
      displayText
      type
      props {
        href
        __typename
      }
      __typename
    }
    productId
    product {
      displayName
      imageUrl
      targetUrl
      alternateImages {
        imageUrl
        caption
        __typename
      }
      colorizeInfo {
        colorizable
        colorizeType
        multicolor
        __typename
      }
      __typename
    }
    price {
      itemPrice
      memberPrice
      priceStatus
      priceType
      currencyCode
      originalPrice
      totalPrice
      salePrice
      finalPrice
      salePriceLabel
      isOnClearance
      isOnSale
      showMemberPrice
      fees
      itemShippingSurcharge
      __typename
    }
    options {
      id
      type
      value
      sortPriority
      __typename
    }
    isGiftFromRegistry
    webPurchasable
    linkedLineItemId
    skuCustomization {
      type
      mountType
      lining
      panel
      controlType
      controlPosition
      controlLength
      tiltType
      controlAndTilt
      trim
      width
      length
      diameter
      roomLabel
      bracketColor
      rollType
      fulfillmentCode
      __typename
    }
    childSafety
    availabilityStatus
    __typename
  }
  shipVia
  cartPrice {
    subtotal
    tax
    taxDetail {
      amount
      name
      country
      state
      imposition
      rate
      __typename
    }
    totalPrice
    feeTotal
    currencyCode
    isFree
    fees {
      feeType
      quantity
      value
      unitCost
      linkedLineItemId
      __typename
    }
    freight {
      unlimited
      ground
      next
      second
      shippingSurcharge
      __typename
    }
    discounts {
      discountCodeTotal
      __typename
    }
    preBillAmount
    remainingToBill
    memberSavings
    employeeSavings
    __typename
  }
  shipAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  billAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  payments {
    totalAmountRemaining
    totalAmountCovered
    appliedPayments {
      id
      paymentMethodType
      paymentType
      lastFour
      amountCovered
      currencyCode
      rhPaymentPlan
      catchAllPayment
      __typename
    }
    __typename
  }
  importantInformation {
    type
    displayText
    __typename
  }
  createdAt
  lastModifiedAt
  totalLines
  discountCodes {
    code
    name
    description
    __typename
  }
  brand
  gallery {
    galleryId
    __typename
  }
  shipLabelSidemark
  giftMessage
  employeeDiscount {
    description
    regularDiscount
    saleDiscount
    __typename
  }
}

fragment LineItemRestrictions on LineItemRestrictionsType {
  type
  sku
  category
  states
  countries
  postalRanges
  __typename
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;shouldEnhance&quot;: false
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.6_GetCart" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetCart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.7_SetCartAddresses" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SetCartAddresses&quot;,&quot;variables&quot;:{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;shippingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skrishnan1@rh.com&quot;,
    &quot;firstName&quot;: &quot;Sridhar&quot;,
    &quot;lastName&quot;: &quot;Krishnan&quot;,
    &quot;phone&quot;: &quot;4235426423&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;unverified&quot;
  },
  &quot;shouldEnhance&quot;: false,
  &quot;billingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skrishnan1@rh.com&quot;,
    &quot;firstName&quot;: &quot;Sridhar&quot;,
    &quot;lastName&quot;: &quot;Krishnan&quot;,
    &quot;phone&quot;: &quot;4235426423&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;unverified&quot;
  }
},&quot;query&quot;:&quot;mutation SetCartAddresses($email: String!, $cartId: String!, $shippingAddress: AddressInput!, $billingAddress: AddressInput, $updateCartInfo: UpdateCartInfo) {\n  setCartAddresses(\n    email: $email\n    cartId: $cartId\n    shippingAddress: $shippingAddress\n    billingAddress: $billingAddress\n    updateCartInfo: $updateCartInfo\n  ) {\n    ...Cart\n    __typename\n  }\n}\n\nfragment Cart on CartType {\n  __typename\n  id\n  requestedDeliveryDate\n  postalCode\n  country\n  coordGroupType\n  coordGroupGroupable\n  coordGroupUserSelected\n  orderNumber\n  cartSavings\n  isUserMember\n  giftBoxFee\n  hasGiftBox\n  hasGiftFromRegistry\n  hasGiftFromMemberRegistry\n  giftRegistryIdList\n  rushShippable\n  guest {\n    userId\n    ctId\n    atgUserId\n    cwUserId\n    email\n    type\n    typeId\n    sourceCode\n    shopperRef\n    __typename\n  }\n  removedItems {\n    invalidRegion {\n      sku\n      product {\n        displayName\n        imageUrl\n        targetUrl\n        alternateImages {\n          imageUrl\n          caption\n          __typename\n        }\n        colorizeInfo {\n          colorizable\n          colorizeType\n          multicolor\n          __typename\n        }\n        __typename\n      }\n      options {\n        id\n        type\n        value\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  lineItems {\n    restrictions {\n      ...LineItemRestrictions\n      __typename\n    }\n    restrictionsApply\n    giftFrom\n    giftTo\n    personalizeInfo {\n      feeHigh\n      feeLow\n      selectedFont {\n        id\n        displayName\n        previewImage\n        image\n        borders {\n          id\n          __typename\n        }\n        __typename\n      }\n      selectedBorder {\n        id\n        image\n        displayName\n        minLength\n        maxLength\n        numberOfLines\n        __typename\n      }\n      selectedStyle {\n        id\n        image\n        minLength\n        maxLength\n        numberOfLines\n        displayName\n        previewImage\n        __typename\n      }\n      selectedColor {\n        id\n        displayName\n        image\n        __typename\n      }\n      __typename\n    }\n    isMonogramFee\n    shouldWaiveMonogramFee\n    shipVia\n    shipViaCode\n    isMonogrammable\n    isPersonalizable\n    fusionId\n    monogram {\n      styleId\n      description\n      maxLines\n      fontCode\n      fontColorCode\n      borderCode\n      lines\n      fulfillmentCode\n      __typename\n    }\n    lineId\n    quantity\n    maxCartQuantity\n    sku\n    skuType\n    multiSkuId\n    brand\n    displayName\n    giftBoxDetail {\n      giftBoxFee\n      giftBoxCurrencyCode\n      __typename\n    }\n    giftWrap\n    deliveryEta\n    deliveryEtaStart\n    deliveryEtaEnd\n    coordGroup\n    registryId\n    spoTerms\n    spoTermsAccepted\n    spoTermsAcceptedDate\n    isMembershipSku\n    availabilityInfo {\n      displayText\n      type\n      props {\n        href\n        __typename\n      }\n      __typename\n    }\n    deliveryInfo {\n      displayText\n      type\n      props {\n        href\n        __typename\n      }\n      __typename\n    }\n    productId\n    product {\n      displayName\n      imageUrl\n      targetUrl\n      alternateImages {\n        imageUrl\n        caption\n        __typename\n      }\n      colorizeInfo {\n        colorizable\n        colorizeType\n        multicolor\n        __typename\n      }\n      __typename\n    }\n    price {\n      itemPrice\n      memberPrice\n      priceStatus\n      priceType\n      currencyCode\n      originalPrice\n      totalPrice\n      salePrice\n      finalPrice\n      salePriceLabel\n      isOnClearance\n      isOnSale\n      showMemberPrice\n      fees\n      itemShippingSurcharge\n      __typename\n    }\n    options {\n      id\n      type\n      value\n      sortPriority\n      __typename\n    }\n    isGiftFromRegistry\n    webPurchasable\n    linkedLineItemId\n    skuCustomization {\n      type\n      mountType\n      lining\n      panel\n      controlType\n      controlPosition\n      controlLength\n      tiltType\n      controlAndTilt\n      trim\n      width\n      length\n      diameter\n      roomLabel\n      bracketColor\n      rollType\n      fulfillmentCode\n      __typename\n    }\n    childSafety\n    availabilityStatus\n    __typename\n  }\n  shipVia\n  cartPrice {\n    subtotal\n    tax\n    taxDetail {\n      amount\n      name\n      country\n      state\n      imposition\n      rate\n      __typename\n    }\n    totalPrice\n    feeTotal\n    currencyCode\n    isFree\n    fees {\n      feeType\n      quantity\n      value\n      unitCost\n      linkedLineItemId\n      __typename\n    }\n    freight {\n      unlimited\n      ground\n      next\n      second\n      shippingSurcharge\n      __typename\n    }\n    discounts {\n      discountCodeTotal\n      __typename\n    }\n    preBillAmount\n    remainingToBill\n    memberSavings\n    employeeSavings\n    __typename\n  }\n  shipAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  billAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  payments {\n    totalAmountRemaining\n    totalAmountCovered\n    appliedPayments {\n      id\n      paymentMethodType\n      paymentType\n      lastFour\n      amountCovered\n      currencyCode\n      rhPaymentPlan\n      catchAllPayment\n      __typename\n    }\n    __typename\n  }\n  importantInformation {\n    type\n    displayText\n    __typename\n  }\n  createdAt\n  lastModifiedAt\n  totalLines\n  discountCodes {\n    code\n    name\n    description\n    __typename\n  }\n  brand\n  gallery {\n    galleryId\n    __typename\n  }\n  shipLabelSidemark\n  giftMessage\n  employeeDiscount {\n    description\n    regularDiscount\n    saleDiscount\n    __typename\n  }\n}\n\nfragment LineItemRestrictions on LineItemRestrictionsType {\n  type\n  sku\n  category\n  states\n  countries\n  postalRanges\n  __typename\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SetCartAddresses</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation SetCartAddresses($email: String!, $cartId: String!, $shippingAddress: AddressInput!, $billingAddress: AddressInput, $updateCartInfo: UpdateCartInfo) {
  setCartAddresses(
    email: $email
    cartId: $cartId
    shippingAddress: $shippingAddress
    billingAddress: $billingAddress
    updateCartInfo: $updateCartInfo
  ) {
    ...Cart
    __typename
  }
}

fragment Cart on CartType {
  __typename
  id
  requestedDeliveryDate
  postalCode
  country
  coordGroupType
  coordGroupGroupable
  coordGroupUserSelected
  orderNumber
  cartSavings
  isUserMember
  giftBoxFee
  hasGiftBox
  hasGiftFromRegistry
  hasGiftFromMemberRegistry
  giftRegistryIdList
  rushShippable
  guest {
    userId
    ctId
    atgUserId
    cwUserId
    email
    type
    typeId
    sourceCode
    shopperRef
    __typename
  }
  removedItems {
    invalidRegion {
      sku
      product {
        displayName
        imageUrl
        targetUrl
        alternateImages {
          imageUrl
          caption
          __typename
        }
        colorizeInfo {
          colorizable
          colorizeType
          multicolor
          __typename
        }
        __typename
      }
      options {
        id
        type
        value
        __typename
      }
      __typename
    }
    __typename
  }
  lineItems {
    restrictions {
      ...LineItemRestrictions
      __typename
    }
    restrictionsApply
    giftFrom
    giftTo
    personalizeInfo {
      feeHigh
      feeLow
      selectedFont {
        id
        displayName
        previewImage
        image
        borders {
          id
          __typename
        }
        __typename
      }
      selectedBorder {
        id
        image
        displayName
        minLength
        maxLength
        numberOfLines
        __typename
      }
      selectedStyle {
        id
        image
        minLength
        maxLength
        numberOfLines
        displayName
        previewImage
        __typename
      }
      selectedColor {
        id
        displayName
        image
        __typename
      }
      __typename
    }
    isMonogramFee
    shouldWaiveMonogramFee
    shipVia
    shipViaCode
    isMonogrammable
    isPersonalizable
    fusionId
    monogram {
      styleId
      description
      maxLines
      fontCode
      fontColorCode
      borderCode
      lines
      fulfillmentCode
      __typename
    }
    lineId
    quantity
    maxCartQuantity
    sku
    skuType
    multiSkuId
    brand
    displayName
    giftBoxDetail {
      giftBoxFee
      giftBoxCurrencyCode
      __typename
    }
    giftWrap
    deliveryEta
    deliveryEtaStart
    deliveryEtaEnd
    coordGroup
    registryId
    spoTerms
    spoTermsAccepted
    spoTermsAcceptedDate
    isMembershipSku
    availabilityInfo {
      displayText
      type
      props {
        href
        __typename
      }
      __typename
    }
    deliveryInfo {
      displayText
      type
      props {
        href
        __typename
      }
      __typename
    }
    productId
    product {
      displayName
      imageUrl
      targetUrl
      alternateImages {
        imageUrl
        caption
        __typename
      }
      colorizeInfo {
        colorizable
        colorizeType
        multicolor
        __typename
      }
      __typename
    }
    price {
      itemPrice
      memberPrice
      priceStatus
      priceType
      currencyCode
      originalPrice
      totalPrice
      salePrice
      finalPrice
      salePriceLabel
      isOnClearance
      isOnSale
      showMemberPrice
      fees
      itemShippingSurcharge
      __typename
    }
    options {
      id
      type
      value
      sortPriority
      __typename
    }
    isGiftFromRegistry
    webPurchasable
    linkedLineItemId
    skuCustomization {
      type
      mountType
      lining
      panel
      controlType
      controlPosition
      controlLength
      tiltType
      controlAndTilt
      trim
      width
      length
      diameter
      roomLabel
      bracketColor
      rollType
      fulfillmentCode
      __typename
    }
    childSafety
    availabilityStatus
    __typename
  }
  shipVia
  cartPrice {
    subtotal
    tax
    taxDetail {
      amount
      name
      country
      state
      imposition
      rate
      __typename
    }
    totalPrice
    feeTotal
    currencyCode
    isFree
    fees {
      feeType
      quantity
      value
      unitCost
      linkedLineItemId
      __typename
    }
    freight {
      unlimited
      ground
      next
      second
      shippingSurcharge
      __typename
    }
    discounts {
      discountCodeTotal
      __typename
    }
    preBillAmount
    remainingToBill
    memberSavings
    employeeSavings
    __typename
  }
  shipAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  billAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  payments {
    totalAmountRemaining
    totalAmountCovered
    appliedPayments {
      id
      paymentMethodType
      paymentType
      lastFour
      amountCovered
      currencyCode
      rhPaymentPlan
      catchAllPayment
      __typename
    }
    __typename
  }
  importantInformation {
    type
    displayText
    __typename
  }
  createdAt
  lastModifiedAt
  totalLines
  discountCodes {
    code
    name
    description
    __typename
  }
  brand
  gallery {
    galleryId
    __typename
  }
  shipLabelSidemark
  giftMessage
  employeeDiscount {
    description
    regularDiscount
    saleDiscount
    __typename
  }
}

fragment LineItemRestrictions on LineItemRestrictionsType {
  type
  sku
  category
  states
  countries
  postalRanges
  __typename
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;shippingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skrishnan1@rh.com&quot;,
    &quot;firstName&quot;: &quot;Sridhar&quot;,
    &quot;lastName&quot;: &quot;Krishnan&quot;,
    &quot;phone&quot;: &quot;4235426423&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;unverified&quot;
  },
  &quot;shouldEnhance&quot;: false,
  &quot;billingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skrishnan1@rh.com&quot;,
    &quot;firstName&quot;: &quot;Sridhar&quot;,
    &quot;lastName&quot;: &quot;Krishnan&quot;,
    &quot;phone&quot;: &quot;4235426423&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;unverified&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="UpdatePostalCode" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;UpdatePostalCode&quot;,&quot;variables&quot;:{
  &quot;postalCode&quot;: &quot;94925-1214&quot;
},&quot;query&quot;:&quot;mutation UpdatePostalCode($postalCode: String!) {\n  updatePostalCode(postalCode: $postalCode) {\n    statusCode\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">UpdatePostalCode</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation UpdatePostalCode($postalCode: String!) {
  updatePostalCode(postalCode: $postalCode) {
    statusCode
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;postalCode&quot;: &quot;94925-1214&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.8_GetAemModel-1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/payment&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/payment&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.9_CartProjection" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.10_GetUserPayments" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserPayments</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserPayments($userId: String!) { getUserPaymentMethods(userId: $userId) { userCardInfo { shopperRef cardInfo { pcid cardType expiryMonth expiryYear defaultCard __typename } billToAddress { firstName lastName companyName line1 line2 city state postalCode country phoneNumber __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserPayments</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserPayments($userId: String!) { getUserPaymentMethods(userId: $userId) { userCardInfo { shopperRef cardInfo { pcid cardType expiryMonth expiryYear defaultCard __typename } billToAddress { firstName lastName companyName line1 line2 city state postalCode country phoneNumber __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.11_GetCart" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetCart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <doubleProp>
              <name>throughput</name>
              <value>60.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
            <intProp name="calcMode">0</intProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Fusion" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">8</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Fusion.csv" enabled="true">
          <stringProp name="filename">Fusion-Fusion.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">Path</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fusion-Search" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">restorationhw-a.b.lucidworks.cloud</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/api/apps/RH/query/search_sku?${Path}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments"> restorationhw-551.b.lucidworks.cloud</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic cnNoYXJtYUByaC5jb206NThKWVdGRzd1ZjZIeWt3Qg==</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseCodesPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Codes per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
